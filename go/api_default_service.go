/*
 * job_offer
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/http/httputil"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

// GetJobOffer - job_offer
func (s *DefaultApiService) GetJobOffer(prefCode string, year string, matter string, class string) (interface{}, error) {
	// TODO - update GetJobOffer with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//有効求職者数
	var valid_job_seeker_number string = "1"
	//有効求人数
	var valid_job_offer_number string = "4"
	//就職件数
	var finding_employment_count string = "5"

	//画面出力用
	// type result_joboffers []*Result_joboffer
	// var res result_joboffers

	var res [5]Result_joboffer

	for r := 0; r < 3; r++ {
		url := "https://opendata.resas-portal.go.jp/api/v1/regionalEmploy/analysis/portfolio"
		req, _ := http.NewRequest("GET", url, nil)

		header(req)

		query := req.URL.Query()

		fmt.Println(req.URL.String())

		//URLの値を追加
		query.Add("prefCode", prefCode)
		query.Add("year", year)

		//matter割り振り
		if r == 0 {
			query.Add("matter", valid_job_seeker_number)
		} else if r == 1 {
			query.Add("matter", valid_job_offer_number)
		} else {
			query.Add("matter", finding_employment_count)
		}

		query.Add("class", class)
		req.URL.RawQuery = query.Encode()

		fmt.Println(req.URL.String())

		//コンテント確認
		client := new(http.Client)
		resp, err := client.Do(req)
		if err != nil {
			panic(err)
		}
		dumpResp, _ := httputil.DumpResponse(resp, true)
		fmt.Printf("%s", dumpResp)

		defer resp.Body.Close()
		byteArray, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatal(err)
		}

		var data InlineResponse200

		if err := json.Unmarshal(byteArray, &data); err != nil {
			fmt.Println("JSON Unmarshal error:", err)
			if err, ok := err.(*json.SyntaxError); ok {
				fmt.Println(string(byteArray[err.Offset-15 : err.Offset+15]))
			}
		}

		for i, p := range data.Result.Data {
			if i > 4 {
				break
			}
			if r == 0 {
				//有効就職者
				res[i].Occupation = p.BroadName
				res[i].Valid_job_seeker = p.Value
			}else if r == 1{
				//有効求人
				res[i].Valid_job_offer = p.Value 
			}else{
				//就職件数
				res[i].Finding_employment_count = p.Value
			}
			fmt.Printf("i=%v", i)
			fmt.Println(res)
			i++
		}

	}

	return res, nil
}

// GetOccupation - occupation
func (s *DefaultApiService) GetOccupation(iscoCode string) (interface{}, error) {
	// TODO - update GetOccupation with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	return nil, errors.New("service method 'GetOccupation' not implemented")
}

// GetTotalPopulation - total_population
func (s *DefaultApiService) GetTotalPopulation(prefCode string, cityCode string) (interface{}, error) {
	// TODO - update GetTotalPopulation with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	return nil, errors.New("service method 'GetTotalPopulation' not implemented")
}

func header(r *http.Request) {
	r.Header.Set("X-API-KEY", "25gLN3MZoSYvg8iWWcl7iI26ioeJQgGUt6JVb1Hn")
	r.Header.Set("Content-Type", "application/json;charset=UTF-8")
}
